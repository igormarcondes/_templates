/* -------------------------------------------------------*/
/* -----------------*>>> MIXINS <<<----------------------*/
/* -------------------------------------------------------*/
@mixin clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}
@mixin border-radius($radius: 5px){
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    -o-border-radius: $radius;
    border-radius: $radius;
}
@mixin box-sizing( $type: border-box ) {
    -webkit-box-sizing: $type;
    -moz-box-sizing: $type;
    -o-box-sizing: $type;
    -ms-box-sizing: $type;
    box-sizing: $type;
}
@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow:inset $top $left $blur $color;
        -moz-box-shadow:inset $top $left $blur $color;
        box-shadow:inset $top $left $blur $color;
    } @else {
        -webkit-box-shadow: $top $left $blur $color;
        -moz-box-shadow: $top $left $blur $color;
        box-shadow: $top $left $blur $color;
    }
}
//https://github.com/mastastealth/sass-flex-mixin
//https://codepen.io/terrymun/pen/cKxwu

@mixin flexbox {
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

%flexbox { @include flexbox; }

@mixin inline-flex {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

%inline-flex { @include inline-flex; }

@mixin flex($fg: 1, $fs: null, $fb: null) {
    
    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;

    // Box-Flex only supports a flex-grow value so let's grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
        $fg-boxflex: nth($fg, 1);
    }

    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg-boxflex;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}

@mixin opacity($opacity: 1){
    -webkit-opacity: $opacity;
    -moz-opacity: $opacity;
    -ms-opacity: $opacity;
    -o-opacity: $opacity;
    opacity: $opacity;
}
@mixin order($val) {
    -webkit-box-ordinal-group: $val;  
    -moz-box-ordinal-group: $val;     
    -ms-flex-order: $val;     
    -webkit-order: $val;  
    order: $val;
}
@mixin radiustl($radius: 5px){
    -webkit-border-top-left-radius: $radius;
    -moz-border-top-left-radius: $radius;
    -ms-border-top-left-radius: $radius;
    -o-border-top-left-radius: $radius;
    border-top-left-radius: $radius;
}
@mixin radiustr($radius: 5px){
    -webkit-border-top-right-radius: $radius;
    -moz-border-top-right-radius: $radius;
    -ms-border-top-right-radius: $radius;
    -o-border-top-right-radius: $radius;
    border-top-right-radius: $radius;
}
@mixin radiusbl($radius: 5px){
    -webkit-border-bottom-left-radius: $radius;
    -moz-border-bottom-left-radius: $radius;
    -ms-border-bottom-left-radius: $radius;
    -o-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
}
@mixin radiusbr($radius: 5px){
    -webkit-border-bottom-right-radius: $radius;
    -moz-border-bottom-right-radius: $radius;
    -ms-border-bottom-right-radius: $radius;
    -o-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
}
@mixin text-shadow($horizOffset, $vertOffset, $blur, $color) {
    -webkit-text-shadow: $horizOffset $vertOffset $blur $color;
    -moz-text-shadow: $horizOffset $vertOffset $blur $color;
    -ms-text-shadow: $horizOffset $vertOffset $blur $color; /* IE 10+ */
    -o-text-shadow: $horizOffset $vertOffset $blur $color;
    text-shadow: $horizOffset $vertOffset $blur $color;
}

@mixin imgbt($img-name, $img-type,  $img-w, $img-h){
    width: $img-w + px;
    height: $img-h + px;
    background: url("#{$path-img}/" + $img-name + "." + $img-type);
    background: {
        repeat: no-repeat;
        color: transparent;
    }
    padding: 0px;
    border: 0px;
    text-indent: -999999px;
    font-size: 0px;
    color: transparent;
}
@mixin bgimg($img-name, $img-type){
    background: url("#{$path-img}/" + $img-name + "." + $img-type);
}

@mixin fonte($font-family: $font-def, $font-weight: "normal", $font-size: 12px, $font-color: #000){
    font: $font-weight  #{$font-size} $font-family;
    color: $font-color;
}

@mixin font-face($style-name, $file, $family, $category:"") {
    $filepath: $font-url + "/" + $family + "/" + $file;
    @font-face {
        font-family: "#{$style-name}";
        src: url($filepath + ".eot");
        src: url($filepath + ".eot?#iefix") format('embedded-opentype'), url($filepath + ".woff") format('woff'), url($filepath + ".ttf")  format('truetype'), url($filepath + ".svg#" + $style-name + "") format('svg');
    }
    %#{$style-name} {
        font: {
            @if $category != "" {
                family: "#{$style-name}", #{$category};
            }
            @else {
                family: "#{$style-name}";
                weight: normal;
            }
        }
    }
}
@mixin reviewaggregate($img-name, $img-type, $star-height, $unit-width){
    background: url("/static/locales/global/img/" + $img-name + "." + $img-type);
    width: ($unit-width * 5) + px;
    height: $star-height + px;
    .rating{
        background: url("/static/locales/global/img/" + $img-name + "." + $img-type);
        background-position: 0 (-($star-height)+px);
        //width: ($unit-width * 5) + px;
        height: ($star-height) + px;
    }
}
@mixin icons($iconCode: f00b, $fontSize:28px, $color: $colorIcons) {
    $contentValue: "\"\\#{$iconCode}\"";
    content:  unquote($contentValue);
    font: normal $fontSize/1 $font-icon;
    color: $color;
    @extend %icons;
}

%icons{
    text-rendering: auto;
    -webkit-font-smoothing: antialiased;
    display: block;
    float: left;
    text-indent: 0;
}

%rk-hide {
    display: none !important;
}






